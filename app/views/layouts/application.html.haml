!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %meta{:content => "IE=edge", "http-equiv" => "X-UA-Compatible"}/
    %meta{:content => "width=device-width, initial-scale=1", :name => "viewport"}/
    %title Red Village
    = favicon_link_tag image_path('images/favicon.ico')
    = stylesheet_link_tag :all
    = csrf_meta_tag
    = javascript_include_tag :application
    / Bootstrap
    %link{:href => "/css/bootstrap.min.css", :rel => "stylesheet"}/
    / custom Bootstrap styles
    %link{:href => "/css/styles.css", :rel => "stylesheet"}/
    %link{:href => "/assets/demo.css", :rel => "stylesheet", :type => "text/css"}/
    / HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries
    / WARNING: Respond.js doesn't work if you view the page via file://
    /[if lt IE 9]
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    %script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"}
    / jQuery (necessary for Bootstrap's JavaScript plugins)
    / Include all compiled plugins (below), or include individual files as needed
    %script{:src => "js/bootstrap.min.js"}
    %script{:src => "http://jwpsrv.com/library/_VSPwqCOEeStYAp+lcGdIw.js"}
    %script{:src => "src/ytv.js", :type => "text/javascript"}
    %script{:src => "assets/js/tickerme.min.js", :type => "text/javascript"}
    %script{:src => "http://jwpsrv.com/library/_VSPwqCOEeStYAp+lcGdIw.js"}
    :javascript
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      
      ga('create', 'UA-61227525-1', 'auto');
      ga('send', 'pageview');
  %body
    .container
      .row
        .col-xs-12
          .login
            .clearfix
              .pull-right
                - unless user_signed_in?
                  = link_to '                                                           |
                    <button type="button" class="btn btn-default btn-sm custom-btn">    |
                      <span class="glyphicon glyphicon-user" aria-hidden="true"></span> |
                      Sign Up                                                           |
                    </button>                                                           |
                    '.html_safe, new_user_registration_path                             |
                  = link_to '                                                           |
                    <button type="button" class="btn btn-default btn-sm custom-btn">    |
                      <span class="glyphicon glyphicon-lock" aria-hidden="true"></span> |
                      Log In                                                            |
                    </button>                                                           |
                    '.html_safe, new_user_session_path                                  |
                - if user_signed_in?
                  = link_to '<button class="btn btn-default btn-sm custom-btn">Log Out</button>'.html_safe, destroy_user_session_path, method: :delete
      %nav.navbar.navbar-default{:role => "navigation"}
        / Brand and toggle get grouped for better mobile display
        .navbar-header
          %button.navbar-toggle.collapsed{"data-target" => "#bs-example-navbar-collapse-1", "data-toggle" => "collapse", :type => "button"}
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
        / Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          .row{:style => "height:0px"}
            .col-md-5
              %ul.nav.navbar-nav.pull-right
                %li.active
                  %a{:href => "/index"}
                    Home
                    %span.sr-only (current)
                %li
                  %a{:href => "about"} About
                %li 
                  = link_to "admin sign up" , new_admin_registration_path
                %li
                  %a{:href => "calendar"} Events
                %li
                  %a{:href => "gallery"} Gallery
                %li
                  %a{:href => "/contact"} Contact
            .col-md-2
              %a.navbar-brand{:href => "/index"}
                %img.img-responsive{:alt => "Brand", :src => "/images/dfdfd.jpg"}/
            .col-md-5
              %ul.nav.navbar-nav.pull-left
                %li
                  %a{:href => "store"} Store
                %li
                  %a{:href => "/trends"} Trending
                %li
                  %a{:href => "/music"} Music
                %li
                  %a{:href => "/lifestyle"} Stlye
                %li
                  %a{:href => "/videos"} Videos
          / /.navbar-collapse
        / /.navbar-collapse
    / /.navbar-collapse
    - if admin_signed_in?
      #admin_login_box{:style => "float:left"}
        = current_admin.email
        |
        \#{link_to 'Admin section', admins_path} |
        \#{link_to 'Sign out', destroy_admin_session_path, method: :delete}
    #fb-root
    :javascript
      // This is called with the results from from FB.getLoginStatus().
      function statusChangeCallback(response) {
      console.log('statusChangeCallback');
      console.log(response);
      // The response object is returned with a status field that lets the
      // app know the current login status of the person.
      // Full docs on the response object can be found in the documentation
      // for FB.getLoginStatus().
      if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
      } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
      'into this app.';
      } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
      'into Facebook.';
      }
      }
      
      // This function is called when someone finishes with the Login
      // Button.  See the onlogin handler attached to it in the sample
      // code below.
      function checkLoginState() {
      FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
      });
      }
      
      window.fbAsyncInit = function() {
      FB.init({
      appId      : '1569438813325868',
      cookie     : true,  // enable cookies to allow the server to access 
      // the session
      xfbml      : true,  // parse social plugins on this page
      version    : 'v2.2' // use version 2.2
      });
      
      // Now that we've initialized the JavaScript SDK, we call 
      // FB.getLoginStatus().  This function gets the state of the
      // person visiting this page and can return one of three states to
      // the callback you provide.  They can be:
      //
      // 1. Logged into your app ('connected')
      // 2. Logged into Facebook, but not your app ('not_authorized')
      // 3. Not logged into Facebook and can't tell if they are logged into
      //    your app or not.
      //
      // These three cases are handled in the callback function.
      
      FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
      });
      
      };
      
      // Load the SDK asynchronously
      (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/sdk.js";
      fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'facebook-jssdk'));
      
      // Here we run a very simple test of the Graph API after login is
      // successful.  See statusChangeCallback() for when this call is made.
      function testAPI() {
      console.log('Welcome!  Fetching your information.... ');
      FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
      'Thanks for logging in, ' + response.name + '!';
      });
      }
    /
      Below we include the Login Button social plugin. This button uses
      the JavaScript SDK to present a graphical Login button that triggers
      the FB.login() function when clicked.
    :javascript
      window.fbAsyncInit = function() {
      FB.init({
      appId      : '1569438813325868',
      xfbml      : true,
      version    : 'v2.3'
      });
      };
      
      (function(d, s, id){
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) {return;}
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/sdk.js";
      fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'facebook-jssdk'));
    :javascript
      (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v2.0";
            fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
    .container
      .row
        = yield
      %footer.footer
        %p.text-muted.text-center
          %span{:style => "color: #900"} RedVillage Â®
